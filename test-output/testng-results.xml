<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="4" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-11-20T16:38:59 IST" name="Default suite" finished-at="2023-11-20T16:39:33 IST" duration-ms="34285">
    <groups>
    </groups>
    <test started-at="2023-11-20T16:38:59 IST" name="Default test" finished-at="2023-11-20T16:39:33 IST" duration-ms="34285">
      <class name="qnodelogintestcases.Register">
        <test-method is-config="true" signature="InitExentReport()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:38:58 IST" name="InitExentReport" finished-at="2023-11-20T16:38:59 IST" duration-ms="384" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InitExentReport -->
        <test-method is-config="true" signature="getnameMethod(org.testng.ITestContext)[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:38:59 IST" name="getnameMethod" finished-at="2023-11-20T16:38:59 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5696c927]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getnameMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:38:59 IST" name="setUp" finished-at="2023-11-20T16:39:06 IST" duration-ms="6987" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterWithMandatoryFields()[pri:1, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:06 IST" name="verifyRegisterWithMandatoryFields" finished-at="2023-11-20T16:39:07 IST" duration-ms="1136" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterWithMandatoryFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:07 IST" name="tearDown" finished-at="2023-11-20T16:39:08 IST" duration-ms="1278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:08 IST" name="generateStatus" finished-at="2023-11-20T16:39:08 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterWithMandatoryFields()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterWithMandatoryFields status=SUCCESS method=Register.verifyRegisterWithMandatoryFields()[pri:1, instance:qnodelogintestcases.Register@74e28667] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:08 IST" name="setUp" finished-at="2023-11-20T16:39:14 IST" duration-ms="5403" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterWithAllFields()[pri:2, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:14 IST" name="verifyRegisterWithAllFields" finished-at="2023-11-20T16:39:15 IST" duration-ms="1465" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterWithAllFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:15 IST" name="tearDown" finished-at="2023-11-20T16:39:16 IST" duration-ms="1269" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:16 IST" name="generateStatus" finished-at="2023-11-20T16:39:16 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterWithAllFields()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterWithAllFields status=SUCCESS method=Register.verifyRegisterWithAllFields()[pri:2, instance:qnodelogintestcases.Register@74e28667] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:16 IST" name="setUp" finished-at="2023-11-20T16:39:23 IST" duration-ms="6341" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterAccountWithExistingEmail()[pri:3, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:23 IST" name="verifyRegisterAccountWithExistingEmail" finished-at="2023-11-20T16:39:24 IST" duration-ms="1201" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountWithExistingEmail -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:24 IST" name="tearDown" finished-at="2023-11-20T16:39:25 IST" duration-ms="1234" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:25 IST" name="generateStatus" finished-at="2023-11-20T16:39:25 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterAccountWithExistingEmail()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterAccountWithExistingEmail status=SUCCESS method=Register.verifyRegisterAccountWithExistingEmail()[pri:3, instance:qnodelogintestcases.Register@74e28667] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:25 IST" name="setUp" finished-at="2023-11-20T16:39:31 IST" duration-ms="6046" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterAccountWithoutProvidingDetails()[pri:4, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:31 IST" name="verifyRegisterAccountWithoutProvidingDetails" finished-at="2023-11-20T16:39:32 IST" duration-ms="458" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountWithoutProvidingDetails -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:32 IST" name="tearDown" finished-at="2023-11-20T16:39:33 IST" duration-ms="1378" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:33 IST" name="generateStatus" finished-at="2023-11-20T16:39:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterAccountWithoutProvidingDetails()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterAccountWithoutProvidingDetails status=SUCCESS method=Register.verifyRegisterAccountWithoutProvidingDetails()[pri:4, instance:qnodelogintestcases.Register@74e28667] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="generateReports()[pri:0, instance:qnodelogintestcases.Register@74e28667]" started-at="2023-11-20T16:39:33 IST" name="generateReports" finished-at="2023-11-20T16:39:34 IST" duration-ms="1146" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReports -->
      </class> <!-- qnodelogintestcases.Register -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
