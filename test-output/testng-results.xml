<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="13" passed="11" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-11-18T11:58:28 IST" name="Suite" finished-at="2023-11-18T12:00:44 IST" duration-ms="136138">
    <groups>
    </groups>
    <test started-at="2023-11-18T11:58:28 IST" name="Test" finished-at="2023-11-18T12:00:44 IST" duration-ms="136138">
      <class name="qnodelogintestcases.Login">
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:13 IST" name="setup" finished-at="2023-11-18T11:59:20 IST" duration-ms="7457" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:20 IST" name="verifyLoginWithValidCredentials" data-provider="validCredentialSuppy" finished-at="2023-11-18T11:59:22 IST" duration-ms="1186" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[demousermalay@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithValidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:22 IST" name="tearDown" finished-at="2023-11-18T11:59:23 IST" duration-ms="991" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:23 IST" name="generateStatus" finished-at="2023-11-18T11:59:23 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Login.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithValidCredentials status=SUCCESS method=Login.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.Login@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:23 IST" name="setup" finished-at="2023-11-18T11:59:30 IST" duration-ms="7491" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:30 IST" name="verifyLoginWithValidCredentials" data-provider="validCredentialSuppy" finished-at="2023-11-18T11:59:31 IST" duration-ms="1202" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[demouser1@gmail1.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithValidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:31 IST" name="tearDown" finished-at="2023-11-18T11:59:32 IST" duration-ms="1031" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:32 IST" name="generateStatus" finished-at="2023-11-18T11:59:32 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Login.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithValidCredentials status=SUCCESS method=Login.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.Login@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:32 IST" name="setup" finished-at="2023-11-18T11:59:40 IST" duration-ms="7337" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithInvalidCredentials()[pri:2, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:40 IST" name="verifyLoginWithInvalidCredentials" finished-at="2023-11-18T11:59:40 IST" duration-ms="665" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithInvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:40 IST" name="tearDown" finished-at="2023-11-18T11:59:41 IST" duration-ms="1098" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:41 IST" name="generateStatus" finished-at="2023-11-18T11:59:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Login.verifyLoginWithInvalidCredentials()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithInvalidCredentials status=SUCCESS method=Login.verifyLoginWithInvalidCredentials()[pri:2, instance:qnodelogintestcases.Login@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:41 IST" name="setup" finished-at="2023-11-18T11:59:48 IST" duration-ms="6985" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithInvalidEmailAndValidPassword()[pri:3, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:48 IST" name="verifyLoginWithInvalidEmailAndValidPassword" finished-at="2023-11-18T11:59:49 IST" duration-ms="773" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithInvalidEmailAndValidPassword -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:49 IST" name="tearDown" finished-at="2023-11-18T11:59:50 IST" duration-ms="1071" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:50 IST" name="generateStatus" finished-at="2023-11-18T11:59:50 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Login.verifyLoginWithInvalidEmailAndValidPassword()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithInvalidEmailAndValidPassword status=SUCCESS method=Login.verifyLoginWithInvalidEmailAndValidPassword()[pri:3, instance:qnodelogintestcases.Login@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:50 IST" name="setup" finished-at="2023-11-18T11:59:58 IST" duration-ms="7616" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithValidEmailAndInvalidPassword()[pri:4, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:58 IST" name="verifyLoginWithValidEmailAndInvalidPassword" finished-at="2023-11-18T11:59:59 IST" duration-ms="652" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithValidEmailAndInvalidPassword -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T11:59:59 IST" name="tearDown" finished-at="2023-11-18T12:00:00 IST" duration-ms="1117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T12:00:00 IST" name="generateStatus" finished-at="2023-11-18T12:00:00 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Login.verifyLoginWithValidEmailAndInvalidPassword()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithValidEmailAndInvalidPassword status=SUCCESS method=Login.verifyLoginWithValidEmailAndInvalidPassword()[pri:4, instance:qnodelogintestcases.Login@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T12:00:00 IST" name="setup" finished-at="2023-11-18T12:00:07 IST" duration-ms="7134" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithoutCredentials()[pri:5, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T12:00:07 IST" name="verifyLoginWithoutCredentials" finished-at="2023-11-18T12:00:07 IST" duration-ms="539" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at qnodelogintestcases.Login.verifyLoginWithoutCredentials(Login.java:133)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithoutCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T12:00:07 IST" name="tearDown" finished-at="2023-11-18T12:00:08 IST" duration-ms="996" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Login@7ce69770]" started-at="2023-11-18T12:00:08 IST" name="generateStatus" finished-at="2023-11-18T12:00:08 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Login.verifyLoginWithoutCredentials()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithoutCredentials status=FAILURE method=Login.verifyLoginWithoutCredentials()[pri:5, instance:qnodelogintestcases.Login@7ce69770] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
      </class> <!-- qnodelogintestcases.Login -->
      <class name="qnodelogintestcases.Search">
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:08 IST" name="setup" finished-at="2023-11-18T12:00:15 IST" duration-ms="6720" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifySearchWithValidProduct()[pri:1, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:15 IST" name="verifySearchWithValidProduct" finished-at="2023-11-18T12:00:16 IST" duration-ms="818" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchWithValidProduct -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:16 IST" name="tearDown" finished-at="2023-11-18T12:00:17 IST" duration-ms="972" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:17 IST" name="generateStatus" finished-at="2023-11-18T12:00:17 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Search.verifySearchWithValidProduct()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifySearchWithValidProduct status=SUCCESS method=Search.verifySearchWithValidProduct()[pri:1, instance:qnodelogintestcases.Search@5b247367] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:17 IST" name="setup" finished-at="2023-11-18T12:00:24 IST" duration-ms="6798" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifySearchWithNonExistProduct()[pri:2, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:24 IST" name="verifySearchWithNonExistProduct" finished-at="2023-11-18T12:00:24 IST" duration-ms="545" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchWithNonExistProduct -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:24 IST" name="tearDown" finished-at="2023-11-18T12:00:25 IST" duration-ms="987" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:25 IST" name="generateStatus" finished-at="2023-11-18T12:00:25 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Search.verifySearchWithNonExistProduct()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifySearchWithNonExistProduct status=SUCCESS method=Search.verifySearchWithNonExistProduct()[pri:2, instance:qnodelogintestcases.Search@5b247367] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:25 IST" name="setup" finished-at="2023-11-18T12:00:32 IST" duration-ms="6581" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifySearchWihoutProduct()[pri:3, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:32 IST" name="verifySearchWihoutProduct" finished-at="2023-11-18T12:00:43 IST" duration-ms="11597" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[Unable to locate element: //p[contains(text(),'There is no product that matches the search criteria.')]
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.8.1'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Command: [c498987c-3c4f-4c6f-b094-9129711616af, findElement {using=xpath, value=//p[contains(text(),'There is no product that matches the search criteria.')]}]
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 119.0.1, moz:accessibilityChecks: false, moz:buildID: 20231106151204, moz:debuggerAddress: 127.0.0.1:37639, moz:geckodriverVersion: 0.33.0, moz:headless: false, moz:platformVersion: 10.0, moz:processID: 11376, moz:profile: C:\Users\MITTAL~1\AppData\L..., moz:shutdownTimeout: 60000, moz:webdriverClick: true, moz:windowless: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://127.0.0.1:37639/devtoo..., se:cdpVersion: 85.0, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: c498987c-3c4f-4c6f-b094-9129711616af]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: Unable to locate element: //p[contains(text(),'There is no product that matches the search criteria.')]
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.8.1'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Command: [c498987c-3c4f-4c6f-b094-9129711616af, findElement {using=xpath, value=//p[contains(text(),'There is no product that matches the search criteria.')]}]
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 119.0.1, moz:accessibilityChecks: false, moz:buildID: 20231106151204, moz:debuggerAddress: 127.0.0.1:37639, moz:geckodriverVersion: 0.33.0, moz:headless: false, moz:platformVersion: 10.0, moz:processID: 11376, moz:profile: C:\Users\MITTAL~1\AppData\L..., moz:shutdownTimeout: 60000, moz:webdriverClick: true, moz:windowless: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://127.0.0.1:37639/devtoo..., se:cdpVersion: 85.0, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: c498987c-3c4f-4c6f-b094-9129711616af
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy21.getText(Unknown Source)
at com.qnode.qa.pages.SearchPage.retriveNoProductMessageText(SearchPage.java:33)
at qnodelogintestcases.Search.verifySearchWihoutProduct(Search.java:72)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchWihoutProduct -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:43 IST" name="tearDown" finished-at="2023-11-18T12:00:44 IST" duration-ms="940" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Search@5b247367]" started-at="2023-11-18T12:00:44 IST" name="generateStatus" finished-at="2023-11-18T12:00:44 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Search.verifySearchWihoutProduct()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifySearchWihoutProduct status=FAILURE method=Search.verifySearchWihoutProduct()[pri:3, instance:qnodelogintestcases.Search@5b247367] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
      </class> <!-- qnodelogintestcases.Search -->
      <class name="qnodelogintestcases.Register">
        <test-method is-config="true" signature="InitExentReport()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:28 IST" name="InitExentReport" finished-at="2023-11-18T11:58:28 IST" duration-ms="285" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InitExentReport -->
        <test-method is-config="true" signature="getnameMethod(org.testng.ITestContext)[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:28 IST" name="getnameMethod" finished-at="2023-11-18T11:58:28 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@54a6ef6]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getnameMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:28 IST" name="setUp" finished-at="2023-11-18T11:58:38 IST" duration-ms="10114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterWithMandatoryFields()[pri:1, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:38 IST" name="verifyRegisterWithMandatoryFields" finished-at="2023-11-18T11:58:40 IST" duration-ms="1541" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterWithMandatoryFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:40 IST" name="tearDown" finished-at="2023-11-18T11:58:41 IST" duration-ms="1096" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:41 IST" name="generateStatus" finished-at="2023-11-18T11:58:41 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterWithMandatoryFields()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterWithMandatoryFields status=SUCCESS method=Register.verifyRegisterWithMandatoryFields()[pri:1, instance:qnodelogintestcases.Register@18271936] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:41 IST" name="setUp" finished-at="2023-11-18T11:58:49 IST" duration-ms="8192" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterWithAllFields()[pri:2, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:49 IST" name="verifyRegisterWithAllFields" finished-at="2023-11-18T11:58:51 IST" duration-ms="1809" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterWithAllFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:51 IST" name="tearDown" finished-at="2023-11-18T11:58:52 IST" duration-ms="1037" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:52 IST" name="generateStatus" finished-at="2023-11-18T11:58:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterWithAllFields()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterWithAllFields status=SUCCESS method=Register.verifyRegisterWithAllFields()[pri:2, instance:qnodelogintestcases.Register@18271936] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:58:52 IST" name="setUp" finished-at="2023-11-18T11:59:00 IST" duration-ms="7640" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterAccountWithExistingEmail()[pri:3, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:59:00 IST" name="verifyRegisterAccountWithExistingEmail" finished-at="2023-11-18T11:59:01 IST" duration-ms="1311" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountWithExistingEmail -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:59:01 IST" name="tearDown" finished-at="2023-11-18T11:59:02 IST" duration-ms="1117" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:59:02 IST" name="generateStatus" finished-at="2023-11-18T11:59:02 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterAccountWithExistingEmail()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterAccountWithExistingEmail status=SUCCESS method=Register.verifyRegisterAccountWithExistingEmail()[pri:3, instance:qnodelogintestcases.Register@18271936] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:59:02 IST" name="setUp" finished-at="2023-11-18T11:59:11 IST" duration-ms="8578" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterAccountWithoutProvidingDetails()[pri:4, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:59:11 IST" name="verifyRegisterAccountWithoutProvidingDetails" finished-at="2023-11-18T11:59:11 IST" duration-ms="659" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountWithoutProvidingDetails -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:59:11 IST" name="tearDown" finished-at="2023-11-18T11:59:12 IST" duration-ms="1100" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T11:59:12 IST" name="generateStatus" finished-at="2023-11-18T11:59:12 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.Register.verifyRegisterAccountWithoutProvidingDetails()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterAccountWithoutProvidingDetails status=SUCCESS method=Register.verifyRegisterAccountWithoutProvidingDetails()[pri:4, instance:qnodelogintestcases.Register@18271936] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="generateReports()[pri:0, instance:qnodelogintestcases.Register@18271936]" started-at="2023-11-18T12:00:44 IST" name="generateReports" finished-at="2023-11-18T12:00:45 IST" duration-ms="776" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReports -->
      </class> <!-- qnodelogintestcases.Register -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
