<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="13" passed="11" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-12-07T16:44:12 IST" name="Suite" finished-at="2023-12-07T16:45:43 IST" duration-ms="91234">
    <groups>
    </groups>
    <test started-at="2023-12-07T16:44:12 IST" name="Test" finished-at="2023-12-07T16:45:43 IST" duration-ms="91234">
      <class name="qnodelogintestcases.SearchTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:16 IST" name="setup" finished-at="2023-12-07T16:45:21 IST" duration-ms="4425" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifySearchWithValidProduct()[pri:1, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:21 IST" name="verifySearchWithValidProduct" finished-at="2023-12-07T16:45:21 IST" duration-ms="429" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchWithValidProduct -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:21 IST" name="tearDown" finished-at="2023-12-07T16:45:22 IST" duration-ms="1045" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:22 IST" name="generateStatus" finished-at="2023-12-07T16:45:22 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.SearchTest.verifySearchWithValidProduct()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifySearchWithValidProduct status=SUCCESS method=SearchTest.verifySearchWithValidProduct()[pri:1, instance:qnodelogintestcases.SearchTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:22 IST" name="setup" finished-at="2023-12-07T16:45:26 IST" duration-ms="4049" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifySearchWithNonExistProduct()[pri:2, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:26 IST" name="verifySearchWithNonExistProduct" finished-at="2023-12-07T16:45:27 IST" duration-ms="377" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchWithNonExistProduct -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:27 IST" name="tearDown" finished-at="2023-12-07T16:45:28 IST" duration-ms="1027" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:28 IST" name="generateStatus" finished-at="2023-12-07T16:45:28 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.SearchTest.verifySearchWithNonExistProduct()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifySearchWithNonExistProduct status=SUCCESS method=SearchTest.verifySearchWithNonExistProduct()[pri:2, instance:qnodelogintestcases.SearchTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:28 IST" name="setup" finished-at="2023-12-07T16:45:32 IST" duration-ms="4383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifySearchWihoutProduct()[pri:3, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:32 IST" name="verifySearchWihoutProduct" finished-at="2023-12-07T16:45:42 IST" duration-ms="10494" status="FAIL">
          <exception class="org.openqa.selenium.NoSuchElementException">
            <message>
              <![CDATA[Unable to locate element: //p[contains(text(),'There is no product that matches the search criteria.')]
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.9'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Command: [5713bfa7-2bcf-4287-a2ad-9b1f5904a7f0, findElement {using=xpath, value=//p[contains(text(),'There is no product that matches the search criteria.')]}]
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 120.0.1, moz:accessibilityChecks: false, moz:buildID: 20231129155202, moz:debuggerAddress: 127.0.0.1:30227, moz:geckodriverVersion: 0.33.0, moz:headless: false, moz:platformVersion: 10.0, moz:processID: 644, moz:profile: C:\Users\MITTAL~1\AppData\L..., moz:shutdownTimeout: 60000, moz:webdriverClick: true, moz:windowless: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://127.0.0.1:30227/devtoo..., se:cdpVersion: 85.0, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 5713bfa7-2bcf-4287-a2ad-9b1f5904a7f0]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.openqa.selenium.NoSuchElementException: Unable to locate element: //p[contains(text(),'There is no product that matches the search criteria.')]
For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
Build info: version: '4.13.0', revision: 'ba948ece5b*'
System info: os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '17.0.9'
Driver info: org.openqa.selenium.firefox.FirefoxDriver
Command: [5713bfa7-2bcf-4287-a2ad-9b1f5904a7f0, findElement {using=xpath, value=//p[contains(text(),'There is no product that matches the search criteria.')]}]
Capabilities {acceptInsecureCerts: true, browserName: firefox, browserVersion: 120.0.1, moz:accessibilityChecks: false, moz:buildID: 20231129155202, moz:debuggerAddress: 127.0.0.1:30227, moz:geckodriverVersion: 0.33.0, moz:headless: false, moz:platformVersion: 10.0, moz:processID: 644, moz:profile: C:\Users\MITTAL~1\AppData\L..., moz:shutdownTimeout: 60000, moz:webdriverClick: true, moz:windowless: false, pageLoadStrategy: normal, platformName: windows, proxy: Proxy(), se:cdp: ws://127.0.0.1:30227/devtoo..., se:cdpVersion: 85.0, setWindowRect: true, strictFileInteractability: false, timeouts: {implicit: 0, pageLoad: 300000, script: 30000}, unhandledPromptBehavior: dismiss and notify}
Session ID: 5713bfa7-2bcf-4287-a2ad-9b1f5904a7f0
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstanceWithCaller(Constructor.java:499)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:480)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.createException(W3CHttpResponseCodec.java:200)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:133)
at org.openqa.selenium.remote.codec.w3c.W3CHttpResponseCodec.decode(W3CHttpResponseCodec.java:52)
at org.openqa.selenium.remote.HttpCommandExecutor.execute(HttpCommandExecutor.java:191)
at org.openqa.selenium.remote.service.DriverCommandExecutor.invokeExecute(DriverCommandExecutor.java:196)
at org.openqa.selenium.remote.service.DriverCommandExecutor.execute(DriverCommandExecutor.java:171)
at org.openqa.selenium.remote.RemoteWebDriver.execute(RemoteWebDriver.java:602)
at org.openqa.selenium.remote.ElementLocation$ElementFinder$2.findElement(ElementLocation.java:165)
at org.openqa.selenium.remote.ElementLocation.findElement(ElementLocation.java:59)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:359)
at org.openqa.selenium.remote.RemoteWebDriver.findElement(RemoteWebDriver.java:353)
at org.openqa.selenium.support.pagefactory.DefaultElementLocator.findElement(DefaultElementLocator.java:68)
at org.openqa.selenium.support.pagefactory.internal.LocatingElementHandler.invoke(LocatingElementHandler.java:38)
at jdk.proxy2/jdk.proxy2.$Proxy18.getText(Unknown Source)
at com.qnode.qa.pages.SearchPage.retriveNoProductMessageText(SearchPage.java:33)
at qnodelogintestcases.SearchTest.verifySearchWihoutProduct(SearchTest.java:72)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:324)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:74)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:123)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:456)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:169)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:595)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:581)
]]>
            </full-stacktrace>
          </exception> <!-- org.openqa.selenium.NoSuchElementException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifySearchWihoutProduct -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:42 IST" name="tearDown" finished-at="2023-12-07T16:45:43 IST" duration-ms="1032" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.SearchTest@1a482e36]" started-at="2023-12-07T16:45:43 IST" name="generateStatus" finished-at="2023-12-07T16:45:43 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.SearchTest.verifySearchWihoutProduct()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifySearchWihoutProduct status=FAILURE method=SearchTest.verifySearchWihoutProduct()[pri:3, instance:qnodelogintestcases.SearchTest@1a482e36] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
      </class> <!-- qnodelogintestcases.SearchTest -->
      <class name="qnodelogintestcases.LoginTest">
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:39 IST" name="setup" finished-at="2023-12-07T16:44:44 IST" duration-ms="4424" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:44 IST" name="verifyLoginWithValidCredentials" data-provider="validCredentialSuppy" finished-at="2023-12-07T16:44:45 IST" duration-ms="677" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[demousermalay@gmail.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithValidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:45 IST" name="tearDown" finished-at="2023-12-07T16:44:46 IST" duration-ms="985" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:46 IST" name="generateStatus" finished-at="2023-12-07T16:44:46 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.LoginTest.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithValidCredentials status=SUCCESS method=LoginTest.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.LoginTest@67c27493] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:46 IST" name="setup" finished-at="2023-12-07T16:44:50 IST" duration-ms="4244" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:50 IST" name="verifyLoginWithValidCredentials" data-provider="validCredentialSuppy" finished-at="2023-12-07T16:44:50 IST" duration-ms="548" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[demouser1@gmail1.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithValidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:50 IST" name="tearDown" finished-at="2023-12-07T16:44:51 IST" duration-ms="994" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:51 IST" name="generateStatus" finished-at="2023-12-07T16:44:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.LoginTest.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithValidCredentials status=SUCCESS method=LoginTest.verifyLoginWithValidCredentials(java.lang.String,java.lang.String)[pri:1, instance:qnodelogintestcases.LoginTest@67c27493] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:51 IST" name="setup" finished-at="2023-12-07T16:44:56 IST" duration-ms="4265" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithInvalidCredentials()[pri:2, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:56 IST" name="verifyLoginWithInvalidCredentials" finished-at="2023-12-07T16:44:56 IST" duration-ms="401" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithInvalidCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:56 IST" name="tearDown" finished-at="2023-12-07T16:44:57 IST" duration-ms="1387" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:57 IST" name="generateStatus" finished-at="2023-12-07T16:44:57 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.LoginTest.verifyLoginWithInvalidCredentials()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithInvalidCredentials status=SUCCESS method=LoginTest.verifyLoginWithInvalidCredentials()[pri:2, instance:qnodelogintestcases.LoginTest@67c27493] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:44:57 IST" name="setup" finished-at="2023-12-07T16:45:02 IST" duration-ms="4301" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithInvalidEmailAndValidPassword()[pri:3, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:02 IST" name="verifyLoginWithInvalidEmailAndValidPassword" finished-at="2023-12-07T16:45:02 IST" duration-ms="446" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithInvalidEmailAndValidPassword -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:02 IST" name="tearDown" finished-at="2023-12-07T16:45:03 IST" duration-ms="1020" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:03 IST" name="generateStatus" finished-at="2023-12-07T16:45:03 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.LoginTest.verifyLoginWithInvalidEmailAndValidPassword()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithInvalidEmailAndValidPassword status=SUCCESS method=LoginTest.verifyLoginWithInvalidEmailAndValidPassword()[pri:3, instance:qnodelogintestcases.LoginTest@67c27493] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:03 IST" name="setup" finished-at="2023-12-07T16:45:08 IST" duration-ms="4587" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithValidEmailAndInvalidPassword()[pri:4, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:08 IST" name="verifyLoginWithValidEmailAndInvalidPassword" finished-at="2023-12-07T16:45:08 IST" duration-ms="385" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithValidEmailAndInvalidPassword -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:08 IST" name="tearDown" finished-at="2023-12-07T16:45:09 IST" duration-ms="962" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:09 IST" name="generateStatus" finished-at="2023-12-07T16:45:09 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.LoginTest.verifyLoginWithValidEmailAndInvalidPassword()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithValidEmailAndInvalidPassword status=SUCCESS method=LoginTest.verifyLoginWithValidEmailAndInvalidPassword()[pri:4, instance:qnodelogintestcases.LoginTest@67c27493] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setup()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:09 IST" name="setup" finished-at="2023-12-07T16:45:14 IST" duration-ms="4638" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="verifyLoginWithoutCredentials()[pri:5, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:14 IST" name="verifyLoginWithoutCredentials" finished-at="2023-12-07T16:45:14 IST" duration-ms="403" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at org.testng.Assert.assertTrue(Assert.java:67)
at qnodelogintestcases.LoginTest.verifyLoginWithoutCredentials(LoginTest.java:138)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:324)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:74)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:123)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:456)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:169)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:595)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:581)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyLoginWithoutCredentials -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:14 IST" name="tearDown" finished-at="2023-12-07T16:45:16 IST" duration-ms="2101" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.LoginTest@67c27493]" started-at="2023-12-07T16:45:16 IST" name="generateStatus" finished-at="2023-12-07T16:45:16 IST" duration-ms="19" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.LoginTest.verifyLoginWithoutCredentials()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyLoginWithoutCredentials status=FAILURE method=LoginTest.verifyLoginWithoutCredentials()[pri:5, instance:qnodelogintestcases.LoginTest@67c27493] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
      </class> <!-- qnodelogintestcases.LoginTest -->
      <class name="qnodelogintestcases.RegisterTest">
        <test-method is-config="true" signature="InitExentReport()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:12 IST" name="InitExentReport" finished-at="2023-12-07T16:44:12 IST" duration-ms="268" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- InitExentReport -->
        <test-method is-config="true" signature="getnameMethod(org.testng.ITestContext)[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:12 IST" name="getnameMethod" finished-at="2023-12-07T16:44:12 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[org.testng.TestRunner@5341641d]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getnameMethod -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:12 IST" name="setUp" finished-at="2023-12-07T16:44:18 IST" duration-ms="5758" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterWithMandatoryFields()[pri:1, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:18 IST" name="verifyRegisterWithMandatoryFields" finished-at="2023-12-07T16:44:19 IST" duration-ms="924" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterWithMandatoryFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:19 IST" name="tearDown" finished-at="2023-12-07T16:44:20 IST" duration-ms="1094" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:20 IST" name="generateStatus" finished-at="2023-12-07T16:44:20 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.RegisterTest.verifyRegisterWithMandatoryFields()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterWithMandatoryFields status=SUCCESS method=RegisterTest.verifyRegisterWithMandatoryFields()[pri:1, instance:qnodelogintestcases.RegisterTest@564fabc8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:20 IST" name="setUp" finished-at="2023-12-07T16:44:24 IST" duration-ms="4288" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterWithAllFields()[pri:2, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:24 IST" name="verifyRegisterWithAllFields" finished-at="2023-12-07T16:44:25 IST" duration-ms="1123" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterWithAllFields -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:25 IST" name="tearDown" finished-at="2023-12-07T16:44:27 IST" duration-ms="1035" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:27 IST" name="generateStatus" finished-at="2023-12-07T16:44:27 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.RegisterTest.verifyRegisterWithAllFields()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterWithAllFields status=SUCCESS method=RegisterTest.verifyRegisterWithAllFields()[pri:2, instance:qnodelogintestcases.RegisterTest@564fabc8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:27 IST" name="setUp" finished-at="2023-12-07T16:44:31 IST" duration-ms="4393" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterAccountWithExistingEmail()[pri:3, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:31 IST" name="verifyRegisterAccountWithExistingEmail" finished-at="2023-12-07T16:44:32 IST" duration-ms="1017" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountWithExistingEmail -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:32 IST" name="tearDown" finished-at="2023-12-07T16:44:33 IST" duration-ms="1084" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:33 IST" name="generateStatus" finished-at="2023-12-07T16:44:33 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.RegisterTest.verifyRegisterAccountWithExistingEmail()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterAccountWithExistingEmail status=SUCCESS method=RegisterTest.verifyRegisterAccountWithExistingEmail()[pri:3, instance:qnodelogintestcases.RegisterTest@564fabc8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="setUp()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:33 IST" name="setUp" finished-at="2023-12-07T16:44:37 IST" duration-ms="4395" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUp -->
        <test-method signature="verifyRegisterAccountWithoutProvidingDetails()[pri:4, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:37 IST" name="verifyRegisterAccountWithoutProvidingDetails" finished-at="2023-12-07T16:44:38 IST" duration-ms="399" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verifyRegisterAccountWithoutProvidingDetails -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:38 IST" name="tearDown" finished-at="2023-12-07T16:44:39 IST" duration-ms="1041" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="generateStatus(java.lang.reflect.Method,org.testng.ITestResult)[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:44:39 IST" name="generateStatus" finished-at="2023-12-07T16:44:39 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void qnodelogintestcases.RegisterTest.verifyRegisterAccountWithoutProvidingDetails()]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[TestResult name=verifyRegisterAccountWithoutProvidingDetails status=SUCCESS method=RegisterTest.verifyRegisterAccountWithoutProvidingDetails()[pri:4, instance:qnodelogintestcases.RegisterTest@564fabc8] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateStatus -->
        <test-method is-config="true" signature="generateReports()[pri:0, instance:qnodelogintestcases.RegisterTest@564fabc8]" started-at="2023-12-07T16:45:44 IST" name="generateReports" finished-at="2023-12-07T16:45:44 IST" duration-ms="939" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- generateReports -->
      </class> <!-- qnodelogintestcases.RegisterTest -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
